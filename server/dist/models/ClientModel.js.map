{"version":3,"sources":["../../models/ClientModel.js"],"names":["ClientModel","getClients","callback","SQLstmt","query","getClientByID","id","addClient","client","values","name","full_name","compliance_dl","active","notes","created_by","last_updated_by","deleteClient","updateClient"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,cAAc;AAClBC,cAAY,oBAASC,QAAT,EAAmB;AAC7B,QAAMC,UAAU,uEAAhB;AACA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqBD,QAArB,CAAP;AACD,GAJiB;;AAMlBG,iBAAe,uBAASC,EAAT,EAAaJ,QAAb,EAAsB;AACnC,QAAMC,UAAU,kFAAhB;AACA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACD,GATiB;;AAWlB;AACA;AACAK,aAAW,mBAASC,MAAT,EAAiBN,QAAjB,EAA0B;AACnC,QAAMC,UAAU,wBACZ,mFADY,GAEZ,kCAFY,GAGZ,iHAHJ;;AAKA,QAAMM,SAAS,CAACD,OAAOF,EAAR,EAAYE,OAAOE,IAAnB,EAAyBF,OAAOG,SAAhC,EAA2CH,OAAOI,aAAlD,EAAiEJ,OAAOK,MAAxE,EACXL,OAAOM,KADI,EACGN,OAAOO,UADV,EACsBP,OAAOQ,eAD7B,EAEXR,OAAOE,IAFI,EAEEF,OAAOG,SAFT,EAEoBH,OAAOI,aAF3B,EAE0CJ,OAAOK,MAFjD,EAGXL,OAAOM,KAHI,EAGGN,OAAOQ,eAHV,CAAf;AAIA,WAAO,oBAAMZ,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD,GAxBiB;;AA0BlBe,gBAAc,sBAASX,EAAT,EAAaJ,QAAb,EAAsB;AAClC,QAAMC,UAAU,kCAAhB;AACA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACD,GA7BiB;;AA+BlB;AACAgB,gBAAc,sBAASV,MAAT,EAAiBN,QAAjB,EAA0B;AACtC,QAAMC,UAAU,8EACZ,+CADJ;AAEA,QAAMM,SAAS,CAACD,OAAOE,IAAR,EAAcF,OAAOG,SAArB,EAAgCH,OAAOI,aAAvC,EAAsDJ,OAAOK,MAA7D,EACXL,OAAOM,KADI,EACGN,OAAOQ,eADV,EAC2BR,OAAOF,EADlC,CAAf;AAEA,WAAO,oBAAMF,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD;AAtCiB,CAApB;;kBAyCeF,W;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ClientModel.js","sourceRoot":"./src","sourcesContent":["import { sql } from \"../mysqldb\";\r\n\r\nconst ClientModel = { \r\n  getClients: function(callback) {\r\n    const SQLstmt = 'select id, name, full_name, compliance_dl, active, notes from clients';\r\n    return sql().query(SQLstmt, callback);\r\n  },\r\n\r\n  getClientByID: function(id, callback){\r\n    const SQLstmt = 'select id, name, full_name, compliance_dl, active, notes from clients where id=?';\r\n    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  // This function handles BOTH ADD and UPDATE.\r\n  // Basically an UPSERT feature.\r\n  addClient: function(client, callback){\r\n    const SQLstmt = 'insert into clients'\r\n      + ' (id, name, full_name, compliance_dl, active, notes, created_by, last_updated_by)'\r\n      + ' values (?, ?, ?, ?, ?, ?, ?, ?)'\r\n      + ' on duplicate key update name = ?, full_name = ?, compliance_dl = ?, active = ?, notes = ?, last_updated_by = ?';\r\n\r\n    const values = [client.id, client.name, client.full_name, client.compliance_dl, client.active\r\n      , client.notes, client.created_by, client.last_updated_by\r\n      , client.name, client.full_name, client.compliance_dl, client.active\r\n      , client.notes, client.last_updated_by];\r\n    return sql().query(SQLstmt, values, callback);\r\n  },\r\n\r\n  deleteClient: function(id, callback){\r\n    const SQLstmt = 'delete from clients where id = ?';\r\n    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  // right now, not using.  Leveraging the upsert functionality MySQL has.  See add.\r\n  updateClient: function(client, callback){\r\n    const SQLstmt = 'update clients set name = ?, full_name = ?, compliance_dl = ?, active = ?'\r\n      + ', notes = ?, last_updated_by = ? where id = ?';\r\n    const values = [client.name, client.full_name, client.compliance_dl, client.active\r\n      , client.notes, client.last_updated_by, client.id];\r\n    return sql().query(SQLstmt, values, callback);\r\n  }\r\n};\r\n\r\nexport default ClientModel;\r\n\r\n// ,\r\n// getTaskById: function(id, callback){\r\n//   return db.query(\"select * from task where Id=?\",[id],callback);\r\n// },\r\n// addTask: function(Task, callback){\r\n//   return db.query(\"Insert into task values(?,?,?)\",[Task.Id,Task.Title,Task.Status],callback);\r\n// },\r\n// deleteTask: function(id, callback){\r\n//   return db.query(\"delete from task where Id=?\",[id],callback);\r\n// },\r\n// updateTask: function(id, Task, callback){\r\n//   return db.query(\"update task set Title=?,Status=? where Id=?\",[Task.Title,Task.Status,id],callback);\r\n// }"]}