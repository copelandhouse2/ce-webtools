{"version":3,"sources":["../../models/SubdivisionModel.js"],"names":["SubdivisionModel","getSubdivisions","callback","SQLstmt","query","getSubdivisionByID","id","addSubdivision","subdivision","values","city_id","created_by","last_updated_by","deleteSubdivision","updateSubdivision"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,mBAAmB;AACvBC,mBAAiB,yBAASC,QAAT,EAAmB;AAClC,QAAMC,UAAU,kDACb,sBADa,GAEb,yCAFH;AAGA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqBD,QAArB,CAAP;AACD,GANsB;;AAQvBG,sBAAoB,4BAASC,EAAT,EAAaJ,QAAb,EAAsB;AACxC,QAAMC,UAAU,kDACb,sBADa,GAEb,yCAFa,GAGb,iBAHH;AAIA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACD,GAdsB;;AAgBvB;AACA;AACAK,kBAAgB,wBAASC,WAAT,EAAsBN,QAAtB,EAA+B;AAC7C,QAAMC,UAAU,6BACZ,0DADY,GAEZ,wBAFY,GAGZ,4EAHJ;AAIA,QAAMM,SAAS,CAACD,YAAYF,EAAb,EAAiBE,YAAYA,WAA7B,EAA0CA,YAAYE,OAAtD,EAA+DF,YAAYG,UAA3E,EAAuFH,YAAYI,eAAnG,EACbJ,YAAYA,WADC,EACYA,YAAYE,OADxB,EACiCF,YAAYI,eAD7C,CAAf;AAEA,WAAO,oBAAMR,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD,GA1BsB;;AA4BvBW,qBAAmB,2BAASP,EAAT,EAAaJ,QAAb,EAAsB;AACvC,QAAMC,UAAU,uCAAhB;AACA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACD,GA/BsB;;AAiCvB;AACAY,qBAAmB,2BAASN,WAAT,EAAsBN,QAAtB,EAA+B;AAChD,QAAMC,UAAU,wFAAhB;AACA,QAAMM,SAAS,CAACD,YAAYA,WAAb,EAA0BA,YAAYE,OAAtC,EAA+CF,YAAYI,eAA3D,EAA4EJ,YAAYF,EAAxF,CAAf;AACA,WAAO,oBAAMF,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD;AAtCsB,CAAzB;;kBAyCeF,gB;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SubdivisionModel.js","sourceRoot":"./src","sourcesContent":["import { sql } from \"../mysqldb\";\r\n\r\nconst SubdivisionModel = { \r\n  getSubdivisions: function(callback) {\r\n    const SQLstmt = 'select s.id, s.subdivision, s.city_id, c.city'\r\n     + ' from subdivisions s'\r\n     + ' left join cities c on s.city_id = c.id';\r\n    return sql().query(SQLstmt, callback);\r\n  },\r\n\r\n  getSubdivisionByID: function(id, callback){\r\n    const SQLstmt = 'select s.id, s.subdivision, s.city_id, c.city'\r\n     + ' from subdivisions s'\r\n     + ' left join cities c on s.city_id = c.id'\r\n     + ' where s.id = ?';\r\n    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  // This function handles BOTH ADD and UPDATE.\r\n  // Basically an UPSERT feature.\r\n  addSubdivision: function(subdivision, callback){\r\n    const SQLstmt = 'insert into subdivisions'\r\n      + ' (id, subdivision, city_id, created_by, last_updated_by)'\r\n      + ' values(?, ?, ?, ?, ?)'\r\n      + ' on duplicate key update subdivision = ?, city_id = ?, last_updated_by = ?';\r\n    const values = [subdivision.id, subdivision.subdivision, subdivision.city_id, subdivision.created_by, subdivision.last_updated_by,\r\n      subdivision.subdivision, subdivision.city_id, subdivision.last_updated_by];\r\n    return sql().query(SQLstmt, values, callback);\r\n  },\r\n\r\n  deleteSubdivision: function(id, callback){\r\n    const SQLstmt = 'delete from subdivisions where id = ?';\r\n    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  // right now, not using.  Leveraging the upsert functionality MySQL has.  See add.\r\n  updateSubdivision: function(subdivision, callback){\r\n    const SQLstmt = 'update subdivisions set subdivision = ?, city_id = ?, last_updated_by = ? where id = ?';\r\n    const values = [subdivision.subdivision, subdivision.city_id, subdivision.last_updated_by, subdivision.id];\r\n    return sql().query(SQLstmt, values, callback);\r\n  }\r\n};\r\n\r\nexport default SubdivisionModel;\r\n\r\n// ,\r\n// getTaskById: function(id, callback){\r\n//   return db.query(\"select * from task where Id=?\",[id],callback);\r\n// },\r\n// addTask: function(Task, callback){\r\n//   return db.query(\"Insert into task values(?,?,?)\",[Task.Id,Task.Title,Task.Status],callback);\r\n// },\r\n// deleteTask: function(id, callback){\r\n//   return db.query(\"delete from task where Id=?\",[id],callback);\r\n// },\r\n// updateTask: function(id, Task, callback){\r\n//   return db.query(\"update task set Title=?,Status=? where Id=?\",[Task.Title,Task.Status,id],callback);\r\n// }"]}