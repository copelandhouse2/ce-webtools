{"version":3,"sources":["../../models/JobNumberSeqModel.js"],"names":["JobNumberSeqModel","getJobNumberSeqs","callback","SQLstmt","query","getJobNumberSeqByID","id","addJobNumberSeq","jns","values","prefix","sequence","year","city_id","client_id","subdivision_id","current_value","created_by","last_updated_by","deleteJobNumberSeq","updateJobNumberSeq"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,oBAAoB;AACxBC,oBAAkB,0BAASC,QAAT,EAAmB;AACnC,QAAMC,UAAU,+FACZ,oDADY,GAEZ,8BAFY,GAGZ,sDAHY,GAIZ,4CAJY,GAKZ,+CALJ;AAMA;AACF;AACE,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqBD,QAArB,CAAP;AACD,GAXuB;;AAaxBG,uBAAqB,6BAASC,EAAT,EAAaJ,QAAb,EAAsB;AACzC,QAAMC,UAAU,wFACZ,oDADY,GAEZ,8BAFY,GAGZ,sDAHY,GAIZ,4CAJY,GAKZ,+CALY,GAMZ,eANJ,CAOK,OAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACN,GAtBuB;;AAwBxBK,mBAAiB,yBAASC,GAAT,EAAcN,QAAd,EAAuB;AACtC,QAAMC,UAAU,qCACZ,iFADY,GAEZ,iCAFY,GAGZ,uCAHY,GAIZ,6DAJY,GAKZ,oEALY,GAMZ,uBANJ;AAOA,QAAMM,SAAS,CAACD,IAAIF,EAAL,EAASE,IAAIE,MAAb,EAAqBF,IAAIG,QAAzB,EAAmCH,IAAII,IAAvC,EAA6CJ,IAAIK,OAAjD,EAA0DL,IAAIM,SAA9D,EAAyEN,IAAIO,cAA7E,EACXP,IAAIQ,aADO,EACQR,IAAIS,UADZ,EACwBT,IAAIU,eAD5B,EAEXV,IAAIE,MAFO,EAECF,IAAIG,QAFL,EAEeH,IAAII,IAFnB,EAEyBJ,IAAIK,OAF7B,EAEsCL,IAAIM,SAF1C,EAEqDN,IAAIO,cAFzD,EAGXP,IAAIQ,aAHO,EAGQR,IAAIU,eAHZ,CAAf;AAIA,WAAO,oBAAMd,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD,GArCuB;;AAuCxBiB,sBAAoB,4BAASb,EAAT,EAAaJ,QAAb,EAAsB;AACxC,QAAMC,UAAU,+CAAhB;AACA,WAAO,oBAAMC,KAAN,CAAYD,OAAZ,EAAqB,CAACG,EAAD,CAArB,EAA2BJ,QAA3B,CAAP;AACD,GA1CuB;;AA4CxBkB,sBAAoB,4BAASZ,GAAT,EAAcN,QAAd,EAAuB;AACzC,QAAMC,UAAU,uEACZ,oEADY,GAEZ,oCAFJ;AAGA,QAAMM,SAAS,CAACD,IAAIE,MAAL,EAAaF,IAAIG,QAAjB,EAA2BH,IAAII,IAA/B,EAAqCJ,IAAIK,OAAzC,EAAkDL,IAAIM,SAAtD,EAAiEN,IAAIO,cAArE,EACXP,IAAIQ,aADO,EACQR,IAAIU,eADZ,EAC6BV,IAAIF,EADjC,CAAf;AAEA,WAAO,oBAAMF,KAAN,CAAYD,OAAZ,EAAqBM,MAArB,EAA6BP,QAA7B,CAAP;AACD;AAnDuB,CAA1B;;kBAsDeF,iB;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JobNumberSeqModel.js","sourceRoot":"./src","sourcesContent":["import { sql } from \"../mysqldb\";\r\n\r\nconst JobNumberSeqModel = { \r\n  getJobNumberSeqs: function(callback) {\r\n    const SQLstmt = 'select j.id, j.prefix, j.sequence, j.year, j.city_id, ci.city, j.client_id, cl.name client'\r\n      + ', j.subdivision_id, s.subdivision, j.current_value'\r\n      + ' from job_number_sequences j'\r\n      + ' left join subdivisions s on j.subdivision_id = s.id'\r\n      + ' inner join cities ci on j.city_id = ci.id'\r\n      + ' inner join clients cl on j.client_id = cl.id';\r\n    // const SQLstmt = 'select * from job_number_sequences'\r\n  ;\r\n    return sql().query(SQLstmt, callback);\r\n  },\r\n\r\n  getJobNumberSeqByID: function(id, callback){\r\n    const SQLstmt = 'select j.id, j.prefix, j.sequence, j.year, j.city_id, ci.city, j.client_id, cl.name'\r\n      + ', j.subdivision_id, s.subdivision, j.current_value'\r\n      + ' from job_number_sequences j'\r\n      + ' left join subdivisions s on j.subdivision_id = s.id'\r\n      + ' inner join cities ci on j.city_id = ci.id'\r\n      + ' inner join clients cl on j.client_id = cl.id'\r\n      + ' and j.id = ?'\r\n    ;    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  addJobNumberSeq: function(jns, callback){\r\n    const SQLstmt = 'insert into job_number_sequences'\r\n      + ' (id, prefix, sequence, year, city_id, client_id, subdivision_id, current_value'\r\n      + ' , created_by, last_updated_by)'\r\n      + ' values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'\r\n      + ' on duplicate key update prefix = ?, sequence = ?, year = ?'\r\n      + ', city_id =?, client_id = ?, subdivision_id = ?, current_value = ?'\r\n      + ', last_updated_by = ?';\r\n    const values = [jns.id, jns.prefix, jns.sequence, jns.year, jns.city_id, jns.client_id, jns.subdivision_id\r\n      , jns.current_value, jns.created_by, jns.last_updated_by\r\n      , jns.prefix, jns.sequence, jns.year, jns.city_id, jns.client_id, jns.subdivision_id\r\n      , jns.current_value, jns.last_updated_by];\r\n    return sql().query(SQLstmt, values, callback);\r\n  },\r\n\r\n  deleteJobNumberSeq: function(id, callback){\r\n    const SQLstmt = 'delete from job_number_sequences where id = ?';\r\n    return sql().query(SQLstmt, [id], callback);\r\n  },\r\n\r\n  updateJobNumberSeq: function(jns, callback){\r\n    const SQLstmt = 'update job_number_sequences set prefix = ?, sequence = ?, year = ?'\r\n      + ', city_id =?, client_id = ?, subdivision_id = ?, current_value = ?'\r\n      + ', last_updated_by = ? where id = ?';\r\n    const values = [jns.prefix, jns.sequence, jns.year, jns.city_id, jns.client_id, jns.subdivision_id\r\n      , jns.current_value, jns.last_updated_by, jns.id];\r\n    return sql().query(SQLstmt, values, callback);\r\n  }\r\n};\r\n\r\nexport default JobNumberSeqModel;\r\n\r\n// ,\r\n// getTaskById: function(id, callback){\r\n//   return db.query(\"select * from task where Id=?\",[id],callback);\r\n// },\r\n// addTask: function(Task, callback){\r\n//   return db.query(\"Insert into task values(?,?,?)\",[Task.Id,Task.Title,Task.Status],callback);\r\n// },\r\n// deleteTask: function(id, callback){\r\n//   return db.query(\"delete from task where Id=?\",[id],callback);\r\n// },\r\n// updateTask: function(id, Task, callback){\r\n//   return db.query(\"update task set Title=?,Status=? where Id=?\",[Task.Title,Task.Status,id],callback);\r\n// }"]}