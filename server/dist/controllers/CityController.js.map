{"version":3,"sources":["../../controllers/CityController.js"],"names":["list","request","response","getCities","err","rows","fields","console","log","json","show","getCityByID","params","id","create","addCity","body","result","insertId","update","updateCity","updateId","remove","deleteCity"],"mappings":";;;;;;;AAAA;;;;;;AAEA;AACO,IAAMA,sBAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,QAAV,EAAuB;;AAEzC,sBAAUC,SAAV,CAAoB,UAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4B;AAC9C,QAAI,CAACF,GAAL,EAAU;AACRG,cAAQC,GAAR,CAAY,0BAAZ;AACA,aAAON,SAASO,IAAT,CAAcJ,IAAd,CAAP;AACD,KAHD,MAIK;AACHE,cAAQC,GAAR,CAAY,+BAAZ;AACA,aAAON,SAASO,IAAT,CAAcL,GAAd,CAAP;AACD;AACF,GATD;AAUD,CAZM;;AAcP;AACO,IAAMM,sBAAO,SAAPA,IAAO,CAACT,OAAD,EAAUC,QAAV,EAAuB;;AAEzC,sBAAUS,WAAV,CAAsBV,QAAQW,MAAR,CAAeC,EAArC,EAAyC,UAAST,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4B;AACnE,QAAI,CAACF,GAAL,EAAU;AACRG,cAAQC,GAAR,CAAY,yBAAZ;AACA,aAAON,SAASO,IAAT,CAAcJ,KAAK,CAAL,CAAd,CAAP;AACD,KAHD,MAIK;AACHE,cAAQC,GAAR,CAAY,+BAAZ;AACA,aAAON,SAASO,IAAT,CAAcL,GAAd,CAAP;AACD;AACF,GATD;AAUD,CAZM;;AAcP;AACO,IAAMU,0BAAS,SAATA,MAAS,CAACb,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,sBAAUa,OAAV,CAAkBd,QAAQe,IAA1B,EAAgC,UAASZ,GAAT,EAAca,MAAd,EAAsB;AACpD,QAAIb,GAAJ,EAAS;AACP;AACA,aAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACD;AACD;AACA;AACA;AACA,WAAOF,SAASO,IAAT,CAAcQ,OAAOC,QAArB,CAAP;AACA;AAED,GAXD;AAYD,CAdM;;AAgBP;AACO,IAAMC,0BAAS,SAATA,MAAS,CAAClB,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,sBAAUkB,UAAV,CAAqBnB,QAAQe,IAA7B,EAAmC,UAASZ,GAAT,EAAca,MAAd,EAAsB;AACvD,QAAIb,GAAJ,EAAS,OAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACT,WAAOF,SAASO,IAAT,CAAcQ,OAAOI,QAArB,CAAP;AACD,GAHD;AAID,CANM;;AAQP;AACO,IAAMC,0BAAS,SAATA,MAAS,CAACrB,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,sBAAUqB,UAAV,CAAqBtB,QAAQW,MAAR,CAAeC,EAApC,EAAwC,UAAST,GAAT,EAAca,MAAd,EAAsB;AAC5D,QAAIb,GAAJ,EAAS,OAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACT,WAAOF,SAASO,IAAT,CAAc,cAAd,CAAP;AACD,GAHD;AAID,CANM","file":"CityController.js","sourceRoot":"./src","sourcesContent":["import CityModel from \"../models/CityModel\";\r\n\r\n// function to get the list of cities.\r\nexport const list = (request, response) => {\r\n\r\n  CityModel.getCities(function(err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... cities');\r\n      return response.json(rows);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n}\r\n\r\n// function to get one city.\r\nexport const show = (request, response) => {\r\n\r\n  CityModel.getCityByID(request.params.id, function(err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... yeah!');\r\n      return response.json(rows[0]);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n}\r\n\r\n// function to add a city.\r\nexport const create = (request, response) => {\r\n\r\n  CityModel.addCity(request.body, function(err, result) {\r\n    if (err) {\r\n      // console.log(\"there was an error\");\r\n      return response.json(err);\r\n    }\r\n    // const insertID = response.json(result.insertId);\r\n    // console.log(insertID);\r\n    // return insertID;\r\n    return response.json(result.insertId);\r\n    // return response.json(\"city added\");\r\n\r\n  });\r\n}\r\n\r\n// function to update a city.\r\nexport const update = (request, response) => {\r\n\r\n  CityModel.updateCity(request.body, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(result.updateId);\r\n  });\r\n}\r\n\r\n// function to delete a city.\r\nexport const remove = (request, response) => {\r\n\r\n  CityModel.deleteCity(request.params.id, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(\"city deleted\");\r\n  });\r\n}"]}