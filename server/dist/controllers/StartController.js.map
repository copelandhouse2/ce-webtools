{"version":3,"sources":["../../controllers/StartController.js"],"names":["list","request","response","getStarts","err","rows","fields","console","log","json","show","getStartByID","params","id","create","addStart","body","result","insertID","insertId","job_number","client_id","client","owner_id","city","subdivision","address1","address2","phase","section","lot","block","fnd_height_fr","fnd_height_fl","fnd_height_rr","fnd_height_rl","plan_type","elevation","masonry","garage_type","garage_entry","garage_swing","garage_drop","garage_extension","covered_patio","bay_window","master_shower_drop","bath1_shower_drop","bath2_shower_drop","bath3_shower_drop","additional_options","comments","created_by","last_updated_by","sequence_id","prefix","sequence","year","city_id","subdivision_id","seqObj","current_value","addJobNumberSeq","card","idList","name","desc","pos","post","error","Error","update","updateStart","updateId","remove","deleteStart"],"mappings":"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","file":"StartController.js","sourceRoot":"./src","sourcesContent":["// import addresses from \"../addresses.js\";\r\n// import AddressModel from \"../models/AddressModel\";\r\nimport StartModel from \"../models/StartModel\";\r\nimport JobNumberSeqModel from \"../models/JobNumberSeqModel\";\r\nimport { sql } from \"../mysqldb\";\r\nimport { trello } from \"../trello\";\r\n\r\n// function to get the list of addresses.\r\nexport const list = (request, response) => {\r\n\r\n  // Listing from mongoDB\r\n  // AddressModel.find({}).exec()\r\n  // .then(addresses => {\r\n  //   return response.json(addresses);\r\n  // });\r\n\r\n  // Listing from MySql;\r\n  // sql().query('SELECT id, job_number, client_id, user_id, city, subdivision, address1, address2 from starts', function(err, rows, fields) {\r\n  StartModel.getStarts(function (err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... Starts');\r\n      return response.json(rows);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n}\r\n\r\n// function to get details of one address\r\nexport const show = (request, response) => {\r\n\r\n  // AddressModel.findById(request.params.id).exec()\r\n  // .then(address => {\r\n  //   return response.json(address);\r\n  // });\r\n\r\n  // return response.json(addresses.find(address => address._id == request.params.id));\r\n\r\n  StartModel.getStartByID(request.params.id, function (err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... yeah!');\r\n      return response.json(rows[0]);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n\r\n}\r\n\r\n// function to create a address\r\nexport const create = (request, response) => {\r\n\r\n  // inserting into mongoDB\r\n  // const address = new AddressModel(request.body);\r\n  // address.save()\r\n  // .then(c => {\r\n  //   return response.json(c);\r\n  // });\r\n\r\n  // console.log(\"Start Controller.create request\", request.body);\r\n\r\n  // console.log(\"query\", SQLstmt);\r\n\r\n  // sql().query(SQLstmt, values, function (err, result) {\r\n  StartModel.addStart(request.body, function(err, result) {\r\n    if (err) return response.json(err);  // If there is an error.\r\n\r\n    const insertID = response.json(result.insertId);\r\n    // console.log(insertID);\r\n\r\n    // Get the variables.\r\n    const { job_number, client_id, client, owner_id, city, subdivision, address1, address2, phase, section, lot, block\r\n      , fnd_height_fr, fnd_height_fl, fnd_height_rr, fnd_height_rl, plan_type, elevation, masonry, garage_type\r\n      , garage_entry, garage_swing, garage_drop, garage_extension, covered_patio, bay_window, master_shower_drop\r\n      , bath1_shower_drop, bath2_shower_drop, bath3_shower_drop, additional_options, comments, created_by, last_updated_by\r\n      , sequence_id, prefix, sequence, year, city_id, subdivision_id } = request.body;\r\n\r\n    // Insert into Job Number Sequences now.\r\n    const seqObj = {\r\n      id: sequence_id,\r\n      prefix: prefix,\r\n      sequence: sequence,\r\n      year: year,\r\n      city_id: city_id,\r\n      client_id: client_id,\r\n      subdivision_id: subdivision_id,\r\n      current_value: job_number,\r\n      created_by: created_by,\r\n      last_updated_by: last_updated_by\r\n    };\r\n\r\n    JobNumberSeqModel.addJobNumberSeq(seqObj, function(err, result) {\r\n      if (err) return response.json(err);\r\n      console.log(\"addStart: Job number created / updated\");\r\n    });\r\n\r\n    // Trello card Create\r\n    const card = {\r\n      idList: \"58224c17dec8267fc73d049f\",\r\n      name: job_number + \"-\" + address1 + \"-\" + subdivision + \"-\" + client,\r\n      desc: \"\",\r\n      pos: \"top\"\r\n    }\r\n\r\n    trello.post(\"1/cards/\", card, function (error, response, body) {\r\n        if (error) throw new Error(error);\r\n        console.log(\"Trello card created\");\r\n      }\r\n    );\r\n\r\n    return insertID;\r\n    // return response.json(result.insertId);\r\n\r\n  });  // end of callback function and addStart\r\n}\r\n\r\n// function to update a start.\r\nexport const update = (request, response) => {\r\n\r\n  StartModel.updateStart(request.body, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(result.updateId);\r\n  });\r\n}\r\n\r\nexport const remove = (request, response) => {\r\n\r\n  // AddressModel.remove({_id: request.params.id})\r\n  // .then(addresses => {\r\n  //   return response.json(\"address deleted\");\r\n  // });\r\n\r\n  StartModel().deleteStart(request.params.id, function (err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(\"start deleted\");\r\n    // return response.json(result.insertId);\r\n  });\r\n}\r\n"]}