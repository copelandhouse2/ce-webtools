{"version":3,"sources":["../../controllers/SubdivisionController.js"],"names":["list","request","response","getSubdivisions","err","rows","fields","console","log","json","show","getSubdivisionByID","params","id","create","addSubdivision","body","result","insertId","update","updateSubdivision","updateId","remove","deleteSubdivision"],"mappings":";;;;;;;AAAA;;;;;;AAEA;AACO,IAAMA,sBAAO,SAAPA,IAAO,CAACC,OAAD,EAAUC,QAAV,EAAuB;;AAEzC,6BAAiBC,eAAjB,CAAiC,UAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4B;AAC3D,QAAI,CAACF,GAAL,EAAU;AACRG,cAAQC,GAAR,CAAY,gCAAZ;AACA,aAAON,SAASO,IAAT,CAAcJ,IAAd,CAAP;AACD,KAHD,MAIK;AACHE,cAAQC,GAAR,CAAY,+BAAZ;AACA,aAAON,SAASO,IAAT,CAAcL,GAAd,CAAP;AACD;AACF,GATD;AAUD,CAZM;;AAcP;AACO,IAAMM,sBAAO,SAAPA,IAAO,CAACT,OAAD,EAAUC,QAAV,EAAuB;;AAEzC,6BAAiBS,kBAAjB,CAAoCV,QAAQW,MAAR,CAAeC,EAAnD,EAAuD,UAAST,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4B;AACjF,QAAI,CAACF,GAAL,EAAU;AACRG,cAAQC,GAAR,CAAY,yBAAZ;AACA,aAAON,SAASO,IAAT,CAAcJ,KAAK,CAAL,CAAd,CAAP;AACD,KAHD,MAIK;AACHE,cAAQC,GAAR,CAAY,+BAAZ;AACA,aAAON,SAASO,IAAT,CAAcL,GAAd,CAAP;AACD;AACF,GATD;AAUD,CAZM;;AAcP;AACO,IAAMU,0BAAS,SAATA,MAAS,CAACb,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,6BAAiBa,cAAjB,CAAgCd,QAAQe,IAAxC,EAA8C,UAASZ,GAAT,EAAca,MAAd,EAAsB;AAClE,QAAIb,GAAJ,EAAS,OAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACT,WAAOF,SAASO,IAAT,CAAcQ,OAAOC,QAArB,CAAP;AACD,GAHD;AAID,CANM;;AAQP;AACO,IAAMC,0BAAS,SAATA,MAAS,CAAClB,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,6BAAiBkB,iBAAjB,CAAmCnB,QAAQe,IAA3C,EAAiD,UAASZ,GAAT,EAAca,MAAd,EAAsB;AACrE,QAAIb,GAAJ,EAAS,OAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACT,WAAOF,SAASO,IAAT,CAAcQ,OAAOI,QAArB,CAAP;AACD,GAHD;AAID,CANM;;AAQP;AACO,IAAMC,0BAAS,SAATA,MAAS,CAACrB,OAAD,EAAUC,QAAV,EAAuB;;AAE3C,6BAAiBqB,iBAAjB,CAAmCtB,QAAQW,MAAR,CAAeC,EAAlD,EAAsD,UAAST,GAAT,EAAca,MAAd,EAAsB;AAC1E,QAAIb,GAAJ,EAAS,OAAOF,SAASO,IAAT,CAAcL,GAAd,CAAP;AACT,WAAOF,SAASO,IAAT,CAAc,qBAAd,CAAP;AACD,GAHD;AAID,CANM","file":"SubdivisionController.js","sourceRoot":"./src","sourcesContent":["import SubdivisionModel from \"../models/SubdivisionModel\";\r\n\r\n// function to get the list of subdivisions.\r\nexport const list = (request, response) => {\r\n\r\n  SubdivisionModel.getSubdivisions(function(err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... subdivisions');\r\n      return response.json(rows);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n}\r\n\r\n// function to get one subdivision.\r\nexport const show = (request, response) => {\r\n\r\n  SubdivisionModel.getSubdivisionByID(request.params.id, function(err, rows, fields) {\r\n    if (!err) {\r\n      console.log('Data retrieved... yeah!');\r\n      return response.json(rows[0]);\r\n    }\r\n    else {\r\n      console.log('Error while performing Query.');\r\n      return response.json(err);\r\n    }\r\n  });\r\n}\r\n\r\n// function to add a subdivision.\r\nexport const create = (request, response) => {\r\n\r\n  SubdivisionModel.addSubdivision(request.body, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(result.insertId);\r\n  });\r\n}\r\n\r\n// function to update a subdivision.\r\nexport const update = (request, response) => {\r\n\r\n  SubdivisionModel.updateSubdivision(request.body, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(result.updateId);\r\n  });\r\n}\r\n\r\n// function to delete a subdivision.\r\nexport const remove = (request, response) => {\r\n\r\n  SubdivisionModel.deleteSubdivision(request.params.id, function(err, result) {\r\n    if (err) return response.json(err);\r\n    return response.json(\"subdivision deleted\");\r\n  });\r\n}"]}